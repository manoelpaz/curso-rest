unit Controllers.Produto;

interface

uses Horse;

procedure Registry;

implementation

uses System.JSON, DataSet.Serialize, Services.Produto;

procedure GetProdutos(Req: THorseRequest; Res: THorseResponse; Next: TProc);
var
  LReturn: TJSONObject;
  LService: TServicesProduto;
begin
  LService := TServicesProduto.Create;
  try
    LReturn := TJSONObject.Create;
    LReturn.AddPair('data', LService.Select(Req.Query).ToJSONArray());
    LReturn.AddPair('records', TJSONNumber(LService.Select));
    Res.Send(LReturn);
  finally
    LService.Free;
  end;
end;

procedure GetProduto(Req: THorseRequest; Res: THorseResponse; Next: TProc);
var
  LService: TServicesProduto;
begin
  LService := TServicesProduto.Create;
  try
    Res.Send('');
  finally
    LService.Free;
  end;
end;

procedure PostProduto(Req: THorseRequest; Res: THorseResponse; Next: TProc);
var
  LService: TServicesProduto;
begin
  LService := TServicesProduto.Create;
  try
    Res.Send('');
  finally
    LService.Free;
  end;
end;

procedure PutProduto(Req: THorseRequest; Res: THorseResponse; Next: TProc);
var
  LService: TServicesProduto;
begin
  LService := TServicesProduto.Create;
  try
    Res.Send('');
  finally
    LService.Free;
  end;
end;

procedure DeleteProduto(Req: THorseRequest; Res: THorseResponse; Next: TProc);
var
  LService: TServicesProduto;
begin
  LService := TServicesProduto.Create;
  try
    Res.Send('');
  finally
    LService.Free;
  end;
end;

procedure Registry;
begin
  THorse.Get('/produtos', GetProdutos);
  THorse.Get('/produtos/:id', GetProduto);
  THorse.Post('/produtos', PostProduto);
  THorse.Put('/produtos/:id', PutProduto);
  THorse.Delete('/produtos/:id', DeleteProduto);
end;

end.
