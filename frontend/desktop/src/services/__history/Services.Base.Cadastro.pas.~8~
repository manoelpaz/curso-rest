unit Services.Base.Cadastro;

interface

uses
  System.SysUtils, System.Classes, Services.Base, FireDAC.Stan.Intf, FireDAC.Stan.Option, FireDAC.Stan.Param, FireDAC.Stan.Error,
  FireDAC.DatS, FireDAC.Phys.Intf, FireDAC.DApt.Intf, Data.DB, FireDAC.Comp.DataSet, FireDAC.Comp.Client, Providers.Session;

type
  TServiceBaseCadastro = class(TServiceBase)
    mtPesquisa: TFDMemTable;
    mtCadastro: TFDMemTable;
  private
    function GetResourceSuffix: string;
  public
    procedure Alterar; virtual;
    procedure Incluir; virtual;
    procedure ListarRegistro; virtual;
    procedure Salvar; virtual;
  end;

implementation

uses RESTRequest4D, DataSet.Serialize, System.JSON;

{%CLASSGROUP 'Vcl.Controls.TControl'}

{$R *.dfm}

{ TServiceBaseCadastro }

procedure TServiceBaseCadastro.Alterar;
var
  LResponse: IResponse;

begin
  if (not mtPesquisa.Active) or (mtPesquisa.IsEmpty) then
    raise Exception.Create('Selecione um registro para alterar');

  LResponse := Request
    .Token('bearer ' + TSession.GetInstance.Token.Access)
    .ResourceSuffix(GetResourceSuffix)
    .Get;

  if (LResponse.StatusCode <> 200) then
    raise Exception.Create(LResponse.Content);

  if mtCadastro.Active then
    mtCadastro.EmptyDataSet;

  mtCadastro.LoadFromJSON(LResponse.Content);
  mtCadastro.Edit;
end;

function TServiceBaseCadastro.GetResourceSuffix: string;
var
  LField: TField;
begin
  for LField in mtPesquisa.Fields do begin
    if (pfInKey in LField.ProviderFlags) then
      Exit(LField.AsString);
  end;
end;

procedure TServiceBaseCadastro.Incluir;
begin
  if not mtCadastro.Active then
    mtCadastro.Open;

  mtCadastro.Append;
end;

procedure TServiceBaseCadastro.ListarRegistro;
var
  LResponse: IResponse;

begin
  mtPesquisa.DisableControls;
  try
    LResponse := Request
      .Token('bearer ' + TSession.GetInstance.Token.Access)
      .ResourceSuffix(EmptyStr)
      .Get;

    if (LResponse.StatusCode <> 200) then
      raise Exception.Create(LResponse.Content);

    if mtPesquisa.Active then
      mtPesquisa.EmptyDataSet;

    mtPesquisa.LoadFromJSON(LResponse.JSONValue.GetValue<TJSONArray>('data'), False);
  finally
    mtPesquisa.EnableControls;
  end;
end;

procedure TServiceBaseCadastro.Salvar;
var
  LResponse: IResponse;

begin
  mtPesquisa.DisableControls;
  try
    LResponse := Request
      .Token('bearer ' + TSession.GetInstance.Token.Access)
      .ResourceSuffix(EmptyStr)
      .ClearBody
      .AddBody(mtCadastro.ToJSONObject)
      .Post;

    if LResponse.StatusCode <> 201 then
      raise Exception.Create(LResponse.Content);

    if not mtPesquisa.Active then
      mtPesquisa.Open;

    mtPesquisa.LoadFromJSON(LResponse.Content);
    mtCadastro.Cancel;
  finally
    mtPesquisa.EnableControls;
  end;
end;

end.
